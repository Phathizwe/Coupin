/**
 * QR Code Compatibility Service
 * 
 * This service ensures that QR codes generated by our enhanced system
 * are fully compatible with the existing scan coupon functionality.
 */

import { EnhancedQRCodeService } from './enhancedQRCodeService';

export class QRCodeCompatibilityService {
  /**
   * Generate a QR code that is guaranteed to be scannable by the app's scanner
   * 
   * @param content The content to encode in the QR code
   * @param format The desired format (png, svg, pdf)
   * @returns Promise that resolves to a data URL for the QR code
   */
  static async generateScannableQRCode(content: string, format: string = 'png'): Promise<string> {
    // Ensure the content is properly formatted for the scanner
    const scannerCompatibleContent = this.formatContentForScanner(content);
    
    // Use the enhanced service to generate the QR code
    return EnhancedQRCodeService.generateCouponQRCode(scannerCompatibleContent, format);
  }
  
  /**
   * Format the content to ensure it's compatible with the scanner
   * 
   * @param content The raw content to format
   * @returns Formatted content that the scanner can process
   */
  static formatContentForScanner(content: string): string {
    // Check if content is already JSON
    try {
      const parsed = JSON.parse(content);
      
      // If it's already properly formatted with type and code/id, return as is
      if (parsed.type === 'coupon' && parsed.code) {
        return content;
      }
      
      if (parsed.type === 'business' && parsed.id) {
        return content;
      }
      
      // If it's JSON but not in the right format, convert it
      return JSON.stringify({
        type: 'coupon',
        code: typeof parsed.code === 'string' ? parsed.code : content
      });
    } catch (e) {
      // If it's not JSON, assume it's a simple coupon code
      return JSON.stringify({
        type: 'coupon',
        code: content
      });
    }
  }
  
  /**
   * Validate that a QR code content is scannable by the app
   * 
   * @param content The QR code content to validate
   * @returns Whether the content is valid for scanning
   */
  static isValidScanContent(content: string): boolean {
    try {
      const parsed = JSON.parse(content);
      
      // Check if it has the required structure
      if (parsed.type === 'coupon' && typeof parsed.code === 'string') {
        return true;
      }
      
      if (parsed.type === 'business' && typeof parsed.id === 'string') {
        return true;
      }
      
      return false;
    } catch (e) {
      // If it's not valid JSON, it's not valid scan content
      return false;
    }
  }
}